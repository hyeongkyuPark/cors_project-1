buildscript {
	ext {
		springBootVersion = '2.4.2.RELEASE'
		querydslPluginVersion = '1.0.10'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" } // plugin 저장소
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
		classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
	}
}
plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.hidetake.ssh' version '2.10.1'         
}

//원격서버 설정
remotes {                          
	corsServer {
		host = project.properties["publicHost"]
		port = project.properties["publicPort"].toInteger()
		user = project.properties["publicUser"]
		password = project.properties["publicPassword"]
	}
}

//원격 scp 빌드파일 전송
task scp {
	doLast {
		ssh.run {
			session(remotes.corsServer) {
				final String buildDir = project.projectDir.path + "/" + buildFileDir
				put from: buildDir, into: project.properties["publicDir"]
			}
		}
	}
}

//빌드명
bootJar{
	archiveFileName='cors.jar'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.ewerk.gradle.plugins.querydsl"


group = 'ml.market'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'


compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.4.2'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.1.RELEASE'
	// https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka
	implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
	compileOnly 'org.projectlombok:lombok'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.3.8.RELEASE'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.querydsl:querydsl-jpa'
//querydsl 추가
	implementation 'com.querydsl:querydsl-apt'
	testCompileOnly("org.projectlombok:lombok")
	testAnnotationProcessor("org.projectlombok:lombok")
	testCompile('org.springframework.security:spring-security-test')

}

test {
	useJUnitPlatform()
}
//querydsl 추가
//def querydslDir = 'src/main/generated'
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	querydsl.extendsFrom compileClasspath
}
project.afterEvaluate {
	project.tasks.compileQuerydsl.options.compilerArgs = [
			"-proc:only",
			"-processor", project.querydsl.processors() +
					',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
	]
}
